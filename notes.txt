I have attributes, and operations.  These are deliberately primative, with the intention that they are members of other more complex objects.

I'm considering that I need at 'TestStep' class, which represents a test step.
That item has an 'Operation' object, which means it has a list of dependencies
as well as the ability to change attributes.  In addition, it needs test
instructions as well as metrics to highlight the cost of applying this item.

Each TestStep may or may not be required for a test pass.  I need multiple
lists of TestSteps; there's a list of available TestStep objects, as well as a
list of required TestSteps.  Each time a TestStep is used from the required
list it is removed.

Separate the TestSteps into ones three lists; one for operations which make no
changes, and the other for required operations which make changes, and a third
which simply lists all operations which make changes.

I need a TestChain; an ordered list of operations.  Run through the list of
required 'no-changes' operations, and append any to the TestChain which match.

Once no more can be appended, try the same with the 'changes' TestSteps, but
this time stop when one is matched.  Then try each of the 'no-changes' steps.
If none of the 'no-changes' steps is applicable, we should try a different
'changes' TestStep.  Transfer the used 'changes' TestStep to the non-required
list.

If none of the TestSteps work, then try one of the 'changes' which are not on
the 'required' list.  The objective is to consume items from the 'no-changes'
list.

If we run out of 'no-changes' steps which can be executed after one test step,
we're going to want to throw in a required 'changes' TestStep, and then go back
to trying a change/no-change sequence.

Eventually we may end up at a point where none of the required 'no-change' and
none of the 'changes' items fit.  In this case, run through each of the
no-longer-required changes to see if we can find a required changes which fits.

-----

Mind you...

Given the current list of attributes, and the requirement for one of the
candidates, we can generate a list of desired add/remove operations.

We can use that list to find operations which fulfil each change.  Obviously we
want changes which themselves have suitable dependencies.  If we fall back to
using this technique, then we're going to want to select whichever sequence
provides the cheapest cost.

The advantage of this approach is that we can construct arbitrarily long chains
of operations which are needed to get the system into the state we need.

For each attribute to change, we may have multiple TestSteps with matching
dependencies.  Select the cheapest at each turn.

-----

So, I now have kick-ass Attributes and Operations classes.

And, I think I have a mechanism for navigating TestSteps.

 1.  Exhaust all changeless TestSteps which match the current state.
 2.  Pick a change TestStep which matches the current state, and go to 1.
 -   Now we have no easy next step.  None of the remaining TestCases can be satisfied.
 3.  Iterate through the remaining test steps
     - calculating the state changes required to satisfy each TestStep's requirements.
     - pick the TestStep with the smallest requirements change
 4.  Iterate through all TestSteps (required or otherwise) which are valid.
     - apply to current state, get difference to requirements
     - whichever change gets closest to desired requirements, apply and goto 4.
     - avoid circular paths by copying list of all test steps, and removing used test steps with each choice
     - if no change is valid, then stop with an error; we're missing a test step
     - if we don't stop, we must eventually fulfil the requirements of our target test step, in which case we can goto 1

-----

So what components will I need:

 - attributes (done)
 - operations (dependencies/changes) (done)
 - TestStep
   - encapsulates an operation
   - cost to perform step
   - required flag - is performing this step required for the test pass
   - description of test to perform and expected result
   - and/or automated script to perform the same action
 - TestStepsRepository (vector?)
   - owns a list of test steps
 - TestChain (list?)
   - a list of TestStep reference/pointers.  Cheap to construct/copy

-----

After some development and testing...

I have some test compilation working.  What does not work so well is selecting
a path where there is no direct path:
 - No single step can be applied to reduces the distance
 - A required step has a paired 'anti-step' which reverts to the existing
   behaviour; and neither affect the distance to the candidate test step

The required change is applied, but then it is undone unnecessarily because the
score relative to the target state doesn't change, and that step represents the
current cheapest step.

I guess the problem is that in order to determine the shortest path to the next
candidate, it may be necessary to temporarily diverge from the target.  For
example, to install EICAR, it is necessary to disable on-access.  The test may
require eicar enabled, so the act of turning off eicar can result in a
temporary divergence.

The current algorithm doesn't work because we simply pick the next closest task
- and since I've shown that the right task may be further away, we'll end up
picking the wrong one.

I'm sure this can be solved by calculating all possible paths, scoring, and
then picking the cheapest.  This may be really expensive, so I'm putting off
implementing this solution in case I can come up with better one.

On the other hand, at any given moment only a subset of operations will be
possible, and this should help bring the price down.

-----

I realize that I'm looking at a brute force analysis.  This is obviously going
to be expensive, with some alleviation in that I'm only considering steps which
have changes (which may be most of them), and only steps which have matching
pre-requesites.  It really isn't going to scale well at all.

So I'm wondering whether there's a better option.  It's always helpful to
analyse how a human would analyse the problem; and I think we would solve this
problem by working backwards.

 - Pick the next candidate we'd like to use
 - see a list of the missing attributes
 - for each step which will provide one or more of those attributes
   - recursively call this algorithm to solve requirement for that step
   - recursively call this algorithm to solve remaining requirements given new
     state
 - select cheapest

So, I have an existing set of test steps:

 -  accessToEicarDenied: haveEicar, onaccess, installed
 -  make list of steps which provide those attributes:
    dropEicar(1:!haveEicar,!onaccess), turnOnOnAccess(2:!onaccess,installed),
    install(5:!installed)

 -  solve dropEicar (dropEicar)
    - solve requirements haveEicar -> 'onaccess' and 'installed'
    - complete - score 6: dropEicar, install
 -  solve turnOnOnAccess (install, turnOffOnAccess)
    - solve requirements 'installed' -> 'onaccess' and 'haveEicar'
      - dropEicar, turnOnOnAccess
    - complete score 10: install, turnOffOnAccess, dropEicar, turnOnOnAccess
 -  solve installed (install)
    - solve requirements 'installed', 'onaccess' -> 'haveEicar'
      - turnOffOnAccess, dropEicar, turnOnOnAccess
    - complete score 10: install, turnOffOnAccess, dropEicar, turnOnOnAccess
 - choose 6: dropEicar, install
     
The objective is to select the cheapest sequence which will apply the prerequesites I need.

For example, if the product is already installed, if I need eicar it can be
obtained by either turning off on-access, droppingEicar, and turning on-access
back on.  it can also be achieved by uninstalling the product, dropping eicar,
and installing.  Obviously we want to avoid the uninstall/install step
because it is much more expensive.  We need to make it obvious to the algorithm too.

I need to determine the linear sequence which satisfies all prerequesites and
does so from a current state.  Thus, I may have two prerequesites which in turn
have unmet dependencies and I need to determine the order to apply those steps,
and their prerequesites.

Another example - the product is installed, and I need to install eicar.  The
perfect solution is the sequence turnOffOnAccess, dropEicar, turnOnOnAccess.
Why is that obvious to me?  I think I'm using an iterative process.  The
suggestions I've offered so far don't work because although I can find
dropEicar, and turnOffOnAccess - it doesn't give me the turnOnOnAccess required
to complete the sequence.  I need to work in both directions?

 - candidate requires haveEicar, state is onaccess.
 - dropEicar provides haveEicar, but requires !onaccess
 - recursively solve dropEicar, which will lead to turnOffOnAccess (and
   uninstall, but hopefully we'll select the cheapest)
 - having solved dropEicar, find elements which provide 'onaccess'.  Use the
   backwards algorithm outlined, but with target state set to the 'solved'
   state from dropEicar.  Actually we have to do this anyway to solve any
   remaining requirements

-----

Fresh off my success solving a specific step, there are additional tasks to
solve:

 - pick order of required steps which minimises overall cost
 - with each solved step, insert changeless pending steps into the chain.
   Actually, that's not going to be necessary if we calculate overall cost for
   all possible sequences.

-----

I've added a test for accessing an excluded eicar.  I was expecting it to drop
the eicar in the exclude folder before installing the product; or the previous
time it disabled on-access, but it explicitly disabled on-access to drop that
eicar.

The solve() function is working, since the steps are correct.  It is solveAll()
which may not, since I don't believe it selected an optimal route.

This may kind-of highlight an issue to consider; in some respects the solution
selected can be considered superior - eicar is dropped close to where it is
used; the current solveAll() function would have dropped it before
installation.

Ah ha!  I understand now.  solve() doesn't order all steps, but only required
ones.  The changes necessary to support that required step are only considered
to proceed from the previous required step to the candidate.  Thus, changes are
made close to where the test happens.  I think this is actually a preferred
outcome since it provides the tester a measure of context on what they're
testing.

-----

Progress Log

The '-i' flag doesn't currently take an argument.  I plan to require that this
option takes a path to a log file.

Each test step executed will be logged to this file in a form which is human
readable, and also easily parsable.  It needs the following information:

 - short description
 - time/date
 - success, failure
 - whether automation was run
 - note

ShortDescription:1423020705:fs:Note about what happened.\n\nMultiple lines are available
